"""
Connect 4
Alberto Elizondo & Nicholas Muchitti
"""
import sys
from PySide6.QtWidgets import QApplication, QMainWindow, QGridLayout, QPushButton, QWidget

class ConnectFourGUI(QMainWindow):
    def __init__(self, rows, columns):
        super().__init__()

        self.rows = rows
        self.columns = columns
        self.board = [[0] * self.columns for _ in range(self.rows)]

        self.init_ui()

    def init_ui(self):
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QGridLayout()

        self.buttons = []
        for row in range(self.rows + 1):
            for col in range(self.columns):
                if row == 0:
                    button = QPushButton()
                    button.clicked.connect(lambda row=row, col=col: self.handle_button_click(row, col))
                    self.buttons.append(button)
                    layout.addWidget(button, row, col)
                    self.style_top_row(button)
                else:
                    button = QPushButton()
                    button.clicked.connect(lambda row=row, col=col: self.handle_button_click(row, col))
                    self.buttons.append(button)
                    layout.addWidget(button, row, col)
                    self.style_button(button)

        central_widget.setLayout(layout)
    def style_top_row(self, button):
        button.setFixedSize(50, 50)  # Set a fixed size for the button
        button.setStyleSheet("""
            QPushButton {
                background-color: white;
                border: 0px solid white;
                border-radius: 50px; /* 2x of the button size for a square shape */
            }
            QPushButton:hover {
                background-color: lightgray;
            }
        """)

    def style_button(self, button):
        button.setFixedSize(50, 50)  # Set a fixed size for the button
        button.setStyleSheet("""
            QPushButton {
                background-color: white;
                border: 2px solid black;
                border-radius: 25px; /* Half of the button size for a circular shape */
            }
            QPushButton:hover {
                background-color: green;
            }
        """)
    
    def handle_button_click(self, row, col):
        # Add logic to handle button click
        # such as update the board and redraw the GUI
        print(f"Button in row {row + 1}, column {col + 1} clicked")
        check_winner()
        
    
    def check_winner():
        #check board
    
    def drop_piece(board, player, coulm, row):
        #board, player, column, row

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = ConnectFourGUI(rows=6, columns=7)
    window.show()
    sys.exit(app.exec_())




